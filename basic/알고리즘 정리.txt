1. 시간 복잡도 표현
O(1) - 상수 시간 : 문제를 해결하는데 오직 한 단계만 처리함
// O(1)
public static int getFirst(int[] nums) {
    return nums[0];
}

O(log n) - 로그 시간 : 문제를 해결하는데 필요한 단계들이 연산마다 특정 요인에 의해 줄어듬.
// O(log n)
public static int binarySearch(int[] nums, int target) {
    int left = 0, right = nums.length - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}

O(n) - 직선적 시간 : 문제를 해결하기 위한 단계의 수와 입력값 n 이 1:1 관계를 가짐
public static int[] reverse(int[] nums) {
    int[] reversed = new int[nums.length];
    for (int i = 0; i < nums.length; i++) {
        reversed[nums.length - i - 1] = nums[i];
    }
    return reversed;
}

O(n log n) - 선형 로그형 : 문제를 해결하기 위한 단계의 수가 N*(log2N)번 만큼의 수행시간을 가진다
// O(n log n)
public static void mergeSort(int[] nums, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(nums, left, mid);
        mergeSort(nums, mid + 1, right);
        merge(nums, left, mid, right);
    }
}

O(n^2) - 2차 시간 : 문제를 해결하기 위한단계의 수는 입력값 n 의제곱
// O(n^2)
public static void selectionSort(int[] nums) {
    for (int i = 0; i < nums.length - 1; i++) {
        int minIdx = i;
        for (int j = i + 1; j < nums.length; j++) {
            if (nums[j] < nums[minIdx]) {
                minIdx = j;
            }
        }
        int tmp = nums[i];
        nums[i] = nums[minIdx];
        nums[minIdx] = tmp;
    }
}
O(2^n) - 지수시간 : 입력 크기의 지수에 비례하는 실행 시간을 가진다
public static int fibonacci(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

O(n!) - 팩토시 : 입력크기의 팩토리얼에 비례하는 실행시간

2. 순열, 조합, 부분집합 결과

조합
[1, 2, 3]
[1, 2, 4]
[1, 2, 5]
[1, 3, 4]
[1, 3, 5]
[1, 4, 5]
[2, 3, 4]
[2, 3, 5]
[2, 4, 5]
[3, 4, 5]

순열
[1, 2, 3]
[1, 2, 4]
[1, 2, 5]
[1, 3, 2]
[1, 3, 4]
[1, 3, 5]
[1, 4, 2]
[1, 4, 3]
[1, 4, 5]
[1, 5, 2]
[1, 5, 3]
[1, 5, 4]
[2, 1, 3]
[2, 1, 4]
[2, 1, 5]
[2, 3, 1]
[2, 3, 4]
[2, 3, 5]
[2, 4, 1]
[2, 4, 3]
[2, 4, 5]
[2, 5, 1]
[2, 5, 3]
[2, 5, 4]
[3, 1, 2]
[3, 1, 4]
[3, 1, 5]
[3, 2, 1]
[3, 2, 4]
[3, 2, 5]
[3, 4, 1]
[3, 4, 2]
[3, 4, 5]
[3, 5, 1]
[3, 5, 2]
[3, 5, 4]
[4, 1, 2]
[4, 1, 3]
[4, 1, 5]
[4, 2, 1]
[4, 2, 3]
[4, 2, 5]
[4, 3, 1]
[4, 3, 2]
[4, 3, 5]
[4, 5, 1]
[4, 5, 2]
[4, 5, 3]
[5, 1, 2]
[5, 1, 3]
[5, 1, 4]
[5, 2, 1]
[5, 2, 3]
[5, 2, 4]
[5, 3, 1]
[5, 3, 2]
[5, 3, 4]
[5, 4, 1]
[5, 4, 2]
[5, 4, 3]

부분집합
1 2 3 4 5
1 2 3 4
1 2 3 5
1 2 3
1 2 4 5
1 2 4
1 2 5
1 2
1 3 4 5
1 3 4
1 3 5
1 3
1 4 5
1 4
1 5
1
2 3 4 5
2 3 4
2 3 5
2 3
2 4 5
2 4
2 5
2
3 4 5
3 4
3 5
3
4 5
4
5


3. nPr, nCr !(팩토리얼) 이용한 계산법
n 개중에서 r개 만큼 뽑아 나열

 nCr=nPr/r!
4. dfs, bfs 구분
DFS는 스택에서 노드를 Pop할 때 방문 표시를 한다.
LIFO 구조이기 때문에, 스택에 노드를 Push할 때 방문 표시를 미리 해두게 된다면, 최근에 추가된 노드를 먼저 탐색해야 하는데 이미 방문 처리가 되어서 탐색이 불가능해진다.

예를 들어, 노드 A에서 B로 가는 경로와 C에서 B로 가는 경로가 차례로 있을 때, B는 두 번 스택에 Push된다.
만약 Push할 때 방문 표시를 진행하고 중복 노드가 Push되지 못하게 한다면, C->B를 먼저 탐색해야 하는데 A->B로 방문 표시가 이미 되어 있는 상태라 깊이우선 탐색이 불가능하다.
따라서 Pop될 때 방문 표시를 진행하여 C->B의 탐색이 완료되면, B의 탐색 완료 표시를 하고, A->B를 탐색하지 않게 하는 것이 DFS를 구현하기 적절하다.


BFS는 큐에 노드를 Push할 때 방문 표시를 한다.

같은 노드를 여러 번 큐에 넣는 것을 방지하기 위해서이다. 어차피 레벨 수준의 순서대로 탐색을 진행하기 때문에 중복된 노드가 들어갈 필요가 없다.
노드 A에서 B로 가는 경로와 C에서 B로 가는 경로가 차례로 있을 때, B는 A->B 과정으로 탐색이 순서대로 먼저 진행되면, C->B에서는 탐색을 진행할 필요가 없다.
따라서 Enqueue하는 시점에서 방문 표시를 하는 것이 큐에 중복으로 노드가 들어가는 것을 방지할 수 있다. 

5. 서로소 연산 unionfindSet 이해

6. ArrayList, LinkedList, HashSet, HashMap 구분
ArrayList
배열처럼 데이터가 순서대로 늘어서 있는 자료구조
인덱스를 통해 빠르게 검색할 수 있음
중간에 데이터를 추가 또는 삭제할 때, 그 위치 이후의 데이터들을 한 칸씩 앞으로 이동시켜야 하므로 시간 복잡도는 O(n)임

LinkedList
자료가 메모리 상에 연달아 존재하지 않고, 각각의 자료가 존재하는 랜덤 한 위치들을 link로 연결해 둔 자료구조
처음 또는 끝에서부터 순차적으로 검색을 수행해야 함

HashSet
Set 인터페이스를 구현한 가장 대표적인 컬렉션으로, 저장 순서를 보장하지 않고, 중복을 허용하지 않음
내부적으로 HashMap 자료형 변수를 갖고 있음

HashMap
중복 key 값을 허용하지 않기 때문에 단 하나의 null 값을 key 값으로 가질 수 있고, 중복이 허용된 value의 경우 여러 null 값을 가질 수 있음

7. stack, Queue, PriorityQueue 구분
스택
가장 마지막에 삽입된 데이터가 가장 먼저 나오는 후입선출(LIFO) 구조를 따릅니다
함수 호출 시 생성되는 지역 변수들이 스택에 저장됩니다
속도가 매우 빠르다는 장점이 있습니다

큐
맨 뒤에 값을 추가하고, 맨 앞의 값을 삭제하는 선입선출(FIFO) 구조를 따릅니다
삽입과 삭제가 둘 다 O(1)의 시간 복잡도를 가집니다

우선순위 큐
우선순위가 가장 높은 값이 제거됩니다
우선순위 큐에서 값을 제거하고 싶다면 poll() 이나 remove() 라는 메서드를 사용합니다
poll() 함수는 우선순위 큐가 비어있으면 null을 반환합니다

8. 그래프 입력에 대응하는 자료구조 이해 (인접행렬, 인접리스트, 간선리스트)



9. 정렬에 필요한 인터페이스
Comparable은 Collection에 추가되는 데이터 자체에 정렬 기준을 넣고 싶을 때 구현하는 인터페이스이다.(내부 정렬기준 구현하기)
Comparator는 외부에 별도로 정렬 기준을 구현하고 싶을 때 사용하는 인터페이스 이다.(외부 정렬 기준 구현하기)
Comparable에서는 compareTo() 메서드를 재정의하고, Comparator에서는 compare()메서드를 재정의해야 한다.
String 클래스, Wrapper 클래스, Date클래스, File클래스에는 내부 정렬 기준이 구현되어 있다.

